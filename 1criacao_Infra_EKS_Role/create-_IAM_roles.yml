AWSTemplateFormatVersion: '2010-09-09'
Description: create IAM roles for EKS usage upfront
Parameters:
  EnvironmentName:
    Type: String
    Default: Eks-Stack-Role
    Description: "Um nome que ser√° usado para o namespace de todos os recursos do cluster"

Resources:

# stack Role para Worker Node  

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [eks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: eks-cluster
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "autoscaling:DescribeAutoScalingGroups"
                - "autoscaling:UpdateAutoScalingGroup"
                - "ec2:AttachVolume"
                - "ec2:AuthorizeSecurityGroupIngress"
                - "ec2:CreateRoute"
                - "ec2:CreateSecurityGroup"
                - "ec2:CreateTags"
                - "ec2:CreateVolume"
                - "ec2:DeleteRoute"
                - "ec2:DeleteSecurityGroup"
                - "ec2:DeleteVolume"
                - "ec2:DescribeInstances"
                - "ec2:DescribeRouteTables"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeVolumes"
                - "ec2:DescribeVolumesModifications"
                - "ec2:DescribeVpcs"
                - "ec2:DescribeDhcpOptions"
                - "ec2:DescribeNetworkInterfaces"
                - "ec2:DetachVolume"
                - "ec2:ModifyInstanceAttribute"
                - "ec2:ModifyVolume"
                - "ec2:RevokeSecurityGroupIngress"
                - "ec2:DescribeAccountAttributes"
                - "ec2:DescribeAddresses"
                - "ec2:DescribeInternetGateways"
                - "elasticloadbalancing:AddTags"
                - "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer"
                - "elasticloadbalancing:AttachLoadBalancerToSubnets"
                - "elasticloadbalancing:ConfigureHealthCheck"
                - "elasticloadbalancing:CreateListener"
                - "elasticloadbalancing:CreateLoadBalancer"
                - "elasticloadbalancing:CreateLoadBalancerListeners"
                - "elasticloadbalancing:CreateLoadBalancerPolicy"
                - "elasticloadbalancing:CreateTargetGroup"
                - "elasticloadbalancing:DeleteListener"
                - "elasticloadbalancing:DeleteLoadBalancer"
                - "elasticloadbalancing:DeleteLoadBalancerListeners"
                - "elasticloadbalancing:DeleteTargetGroup"
                - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                - "elasticloadbalancing:DeregisterTargets"
                - "elasticloadbalancing:DescribeListeners"
                - "elasticloadbalancing:DescribeLoadBalancerAttributes"
                - "elasticloadbalancing:DescribeLoadBalancerPolicies"
                - "elasticloadbalancing:DescribeLoadBalancers"
                - "elasticloadbalancing:DescribeTargetGroupAttributes"
                - "elasticloadbalancing:DescribeTargetGroups"
                - "elasticloadbalancing:DescribeTargetHealth"
                - "elasticloadbalancing:DetachLoadBalancerFromSubnets"
                - "elasticloadbalancing:ModifyListener"
                - "elasticloadbalancing:ModifyLoadBalancerAttributes"
                - "elasticloadbalancing:ModifyTargetGroup"
                - "elasticloadbalancing:ModifyTargetGroupAttributes"
                - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                - "elasticloadbalancing:RegisterTargets"
                - "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer"
                - "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
                - "kms:DescribeKey"
              Resource: '*'         

# stack Role para Worker Node  

  EKSWorkerNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: eks-work-node
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "ec2:DescribeInstances"
                - "ec2:DescribeInstanceTypes"
                - "ec2:DescribeRouteTables"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeVolumes"
                - "ec2:DescribeVolumesModifications"
                - "ec2:DescribeVpcs"
                - "eks:DescribeCluster"
              Resource: '*'  
              
# stack Role policy              
            
  EKSServicePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: eks-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "ec2:CreateNetworkInterface"
                - "ec2:CreateNetworkInterfacePermission"
                - "ec2:DeleteNetworkInterface"
                - "ec2:DescribeInstances"
                - "ec2:DescribeNetworkInterfaces"
                - "ec2:DetachNetworkInterface"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeVpcs"
                - "ec2:ModifyNetworkInterfaceAttribute"
                - "iam:ListAttachedRolePolicies"
                - "eks:UpdateClusterVersion"
              Resource: '*'

Outputs:
  EKSClusterRole:
    Description: The ARN of the Eks Cluster
    Value: !GetAtt 'EKSClusterRole.Arn'
    Export:
      Name: !Sub ${EnvironmentName}:eks-cluster
  EKSWorkerNodeRole:
    Description: The ARN of the Eks Node
    Value: !GetAtt 'EKSWorkerNodeRole.Arn'
    Export:
      Name: !Sub ${EnvironmentName}:eks-work-node
  EKSServicePolicy:
    Description: The ARN of the Eks Node
    Value: !GetAtt 'EKSServicePolicy.Arn'
    Export:
      Name: !Sub ${EnvironmentName}:eks-service
      
  